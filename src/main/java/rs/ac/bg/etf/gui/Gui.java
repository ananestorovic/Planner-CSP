/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rs.ac.bg.etf.gui;

import com.formdev.flatlaf.FlatDarkLaf;
import enums.CspAlgorithmType;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Timer;
import java.util.TimerTask;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.plaf.synth.Region;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import org.javatuples.Pair;
import org.javatuples.Quartet;
import rs.ac.bg.etf.DayOfWeek;
import rs.ac.bg.etf.PlannerCSP;
import rs.ac.bg.etf.TimeInterval;

/**
 *
 * @author ana
 */
public class Gui extends javax.swing.JFrame implements GuiController {

    Map<String, List<Quartet<Integer, Integer, Integer, Integer>>> daysOfWeek = new HashMap<>();

    /**
     * Creates new form Gui
     */
    public Gui() {
//        List<Quartet<Integer, Integer, Integer, Integer>> freeSlotsList = new ArrayList<>();
//        freeSlotsList.add(new Quartet<>(9, 00, 14, 30));
//        freeSlotsList.add(new Quartet<>(16, 00, 17, 00));
//
//        for (String oneDay : DAYS_OF_WEEK) {
//            daysOfWeek.put(oneDay, new ArrayList<>(freeSlotsList));
//        }
//        List<String> teamNames = new ArrayList<>();
//        teamNames.add("teamOne");
//        teamNames.add("teamTwo");
//        teamNames.add("teamThree");
//        teamNames.add("teamFour");

        initComponents();

//        initTeamTables(teamNames, freeSlotsList, solution);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        JPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        basicCsp = new javax.swing.JRadioButton();
        forwardChecking = new javax.swing.JRadioButton();
        arcConsistencyWithFC = new javax.swing.JRadioButton();
        startSimulation = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        teamAName = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        teamATable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        teamBTable = new javax.swing.JTable();
        teamBName = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        teamCTable = new javax.swing.JTable();
        teamCName = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        teamDTable = new javax.swing.JTable();
        teamDName = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        nextStep = new javax.swing.JButton();
        goToStartPage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));

        mainPanel.setRequestFocusEnabled(false);
        mainPanel.setLayout(new java.awt.CardLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        JPanel2.setMinimumSize(new java.awt.Dimension(99, 600));
        JPanel2.setPreferredSize(new java.awt.Dimension(99, 600));
        JPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(0, 1));

        buttonGroup1.add(basicCsp);
        basicCsp.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        basicCsp.setText("Basic CSP");
        basicCsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicCspActionPerformed(evt);
            }
        });
        jPanel4.add(basicCsp);

        buttonGroup1.add(forwardChecking);
        forwardChecking.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        forwardChecking.setText("Forward checking");
        jPanel4.add(forwardChecking);

        buttonGroup1.add(arcConsistencyWithFC);
        arcConsistencyWithFC.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        arcConsistencyWithFC.setText("Arc consistency with forward checking");
        arcConsistencyWithFC.setAlignmentX(1.0F);
        arcConsistencyWithFC.setAlignmentY(1.0F);
        arcConsistencyWithFC.setAutoscrolls(true);
        arcConsistencyWithFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arcConsistencyWithFCActionPerformed(evt);
            }
        });
        jPanel4.add(arcConsistencyWithFC);

        JPanel2.add(jPanel4, java.awt.BorderLayout.LINE_START);

        startSimulation.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        startSimulation.setText("Start simulation");
        startSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSimulationActionPerformed(evt);
            }
        });
        JPanel2.add(startSimulation, java.awt.BorderLayout.PAGE_END);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(JPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(250, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(194, 194, 194)
                .addComponent(JPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(121, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel9, java.awt.BorderLayout.CENTER);

        mainPanel.add(jPanel1, "card3");

        jPanel7.setRequestFocusEnabled(false);
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel8.setMinimumSize(new java.awt.Dimension(500, 600));
        jPanel8.setPreferredSize(new java.awt.Dimension(700, 600));
        jPanel8.setLayout(new java.awt.GridLayout(0, 2));

        jPanel2.setLayout(new java.awt.BorderLayout());

        teamAName.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        teamAName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        teamAName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.add(teamAName, java.awt.BorderLayout.PAGE_START);

        teamATable.setModel(new javax.swing.table.DefaultTableModel(
            WORK_TIMES_IN_DAY,
            TABE_HEADER
        ));
        teamATable.setShowGrid(true);
        jScrollPane1.setViewportView(teamATable);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel2);

        jPanel5.setLayout(new java.awt.BorderLayout());

        teamBTable.setModel(new javax.swing.table.DefaultTableModel(
            WORK_TIMES_IN_DAY,
            TABE_HEADER
        ));
        teamBTable.setShowGrid(true);
        jScrollPane3.setViewportView(teamBTable);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        teamBName.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        teamBName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel5.add(teamBName, java.awt.BorderLayout.PAGE_START);

        jPanel8.add(jPanel5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        teamCTable.setModel(new javax.swing.table.DefaultTableModel(
            WORK_TIMES_IN_DAY,
            TABE_HEADER
        ));
        teamCTable.setShowGrid(true);
        jScrollPane2.setViewportView(teamCTable);

        jPanel6.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        teamCName.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        teamCName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel6.add(teamCName, java.awt.BorderLayout.PAGE_START);

        jPanel8.add(jPanel6);

        jPanel10.setLayout(new java.awt.BorderLayout());

        teamDTable.setModel(new javax.swing.table.DefaultTableModel(
            WORK_TIMES_IN_DAY,
            TABE_HEADER
        ));
        teamDTable.setShowGrid(true);
        jScrollPane4.setViewportView(teamDTable);

        jPanel10.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        teamDName.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        teamDName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel10.add(teamDName, java.awt.BorderLayout.PAGE_START);

        jPanel8.add(jPanel10);

        jPanel7.add(jPanel8, java.awt.BorderLayout.PAGE_START);
        jPanel8.getAccessibleContext().setAccessibleDescription("");

        jPanel3.setLayout(new java.awt.GridLayout());

        nextStep.setText("Next step");
        nextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextStepActionPerformed(evt);
            }
        });
        jPanel3.add(nextStep);

        goToStartPage.setText("Go to start page");
        goToStartPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToStartPageActionPerformed(evt);
            }
        });
        jPanel3.add(goToStartPage);

        jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

        mainPanel.add(jPanel7, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private CspAlgorithmType getCspAlgorithmTypeUsingRadioButtons() {
        CspAlgorithmType retVal = null;
        if (basicCsp.isSelected()) {
            retVal = CspAlgorithmType.BASIC_CSP;
        }
        if (forwardChecking.isSelected()) {
            retVal = CspAlgorithmType.FC;
        }
        if (arcConsistencyWithFC.isSelected()) {
            retVal = CspAlgorithmType.ARC_WITH_FC;
        }
        return retVal;
    }

    private void startSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSimulationActionPerformed
        CspAlgorithmType cspAlgorithmType = getCspAlgorithmTypeUsingRadioButtons();
        if (cspAlgorithmType != null) {

            if (guiListener != null) {
                guiListener.startSimulation(cspAlgorithmType);
            }
            CardLayout cardLayout = (CardLayout) mainPanel.getLayout();
            cardLayout.next(mainPanel);
        } else {
            JOptionPane.showMessageDialog(this, "You need to select one option", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_startSimulationActionPerformed

    private void arcConsistencyWithFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arcConsistencyWithFCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_arcConsistencyWithFCActionPerformed

    private void basicCspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basicCspActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_basicCspActionPerformed

    private void nextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextStepActionPerformed
        if (guiListener != null) {
            guiListener.nextStep();
        }
    }//GEN-LAST:event_nextStepActionPerformed

    private void goToStartPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToStartPageActionPerformed
        if (guiListener != null) {
            guiListener.stopSimulation();
        }
        CardLayout cardLayout = (CardLayout) mainPanel.getLayout();
        cardLayout.previous(mainPanel);
    }//GEN-LAST:event_goToStartPageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatDarkLaf());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GuiController guiController = new Gui();
                guiController.setListener(new PlannerCSP(guiController));
            }
        });
    }

    private Map<DayOfWeek, Set<Pair<LocalTime, LocalTime>>> makeTerminsList(String teamName, Map<Pair<String, String>, Map<DayOfWeek, List<TimeInterval>>> listWithQuartets) {
        Map<DayOfWeek, Set<Pair<LocalTime, LocalTime>>> helpList = new HashMap<>();
        listWithQuartets.entrySet().stream().filter(entry -> entry.getKey().getValue0().equals(teamName)).map(entry -> entry.getValue()).forEach(oneDayMap -> {

            oneDayMap.forEach((day, termins) -> {
                helpList.computeIfAbsent(day, entry -> new HashSet<>()).addAll(termins.stream().map(termin -> {
                    return makeInterval(termin.getStartHour(), termin.getStartMinute(), termin.getEndHour(), termin.getEndMinute());
                }).collect(Collectors.toList()));
            });

        });
//        listWithQuartets.forEach(e -> {
//            helpList.add());
//        });
        return helpList;
    }

    private Pair<LocalTime, LocalTime> makeInterval(Integer h1, Integer m1, Integer h2, Integer m2) {
        LocalTime firstInteral = LocalTime.of(h1, m1);
        LocalTime secondInterval = LocalTime.of(h2, m2);
        return new Pair<>(firstInteral, secondInterval);
    }

    @Override
    public void initTeamTables(List<String> teamNames, Map<Pair<String, String>, Map<DayOfWeek, List<TimeInterval>>> freeSloots, Map<Pair<String, String>, Pair<DayOfWeek, List<TimeInterval>>> solution) {
        teamsData = getTeamDataList(teamNames, freeSloots);
        JTable[] teamTables = new JTable[]{teamATable, teamBTable, teamCTable, teamDTable};
        JLabel[] teamNamesLabel = new JLabel[]{teamAName, teamBName, teamCName, teamDName};
        for (int i = 0; i < teamsData.size(); i++) {
            teamNamesLabel[i].setText(teamsData.get(i).getTeamName());
            setTableData(teamTables[i], teamsData.get(i));
            teamTables[i].repaint();
        }
    }

    private List<TeamData> getTeamDataList(List<String> teamNames, Map<Pair<String, String>, Map<DayOfWeek, List<TimeInterval>>> freeSloots) {
        List<TeamData> tempTeamList = new ArrayList<>();
        for (String teamName : teamNames) {
            TeamData teamData = new TeamData();
            teamData.setTeamName(teamName);
            teamData.setFreeList(makeTerminsList(teamName, freeSloots));
            teamData.setMeetings(new HashMap<>());
            tempTeamList.add(teamData);
        }
        return tempTeamList.stream().limit(4).collect(Collectors.toList());
    }

    @Override
    public void refreshGui(Map<Pair<String, String>, Map<DayOfWeek, List<TimeInterval>>> freeSloots, Map<Pair<String, String>, Pair<DayOfWeek, List<TimeInterval>>> solution) {
        JTable[] teamTables = new JTable[]{teamATable, teamBTable, teamCTable, teamDTable};
        Map<String, Map<DayOfWeek, Map<String, Set<Pair<LocalTime, LocalTime>>>>> meetings = makeMeetings(solution);
        for (int i = 0; i < teamsData.size(); i++) {
            TeamData teamData = teamsData.get(i);
            teamData.setFreeList(makeTerminsList(teamData.getTeamName(), freeSloots));
            teamData.setMeetings(meetings.get(teamData.getTeamName()));
            teamTables[i].repaint();
        }

    }

    private Map<String, Map<DayOfWeek, Map<String, Set<Pair<LocalTime, LocalTime>>>>> makeMeetings(Map<Pair<String, String>, Pair<DayOfWeek, List<TimeInterval>>> solution) {
        Map<String, Map<DayOfWeek, Map<String, Set<Pair<LocalTime, LocalTime>>>>> retVal = new HashMap<>();

        solution.entrySet().forEach(teamMeetingToDayAndTime -> {

            Pair<String, String> teamAndMeeting = teamMeetingToDayAndTime.getKey();
            String team = teamAndMeeting.getValue0();
            String meeting = teamAndMeeting.getValue1();

            Pair<DayOfWeek, List<TimeInterval>> dayAndTermins = teamMeetingToDayAndTime.getValue();
            DayOfWeek dayOfWeek = dayAndTermins.getValue0();
            List<TimeInterval> termins = dayAndTermins.getValue1();

            Map<String, Set<Pair<LocalTime, LocalTime>>> meetingNameToTimeMap = new HashMap<>();

            Map<DayOfWeek, Map<String, Set<Pair<LocalTime, LocalTime>>>> oneTeamMeetings = retVal.computeIfAbsent(team, key -> new HashMap<>());

            oneTeamMeetings.computeIfAbsent(dayOfWeek, key -> new HashMap<>()).put(meeting,
                    termins.stream().map(oneTerminInterval -> makeInterval(oneTerminInterval.getStartHour(), oneTerminInterval.getStartMinute(), oneTerminInterval.getEndHour(), oneTerminInterval.getEndMinute())).collect(Collectors.toSet()));
        });
        return retVal;
    }

    public void registerListener(GuiListener guiListener) {
        this.guiListener = guiListener;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanel2;
    private javax.swing.JRadioButton arcConsistencyWithFC;
    private javax.swing.JRadioButton basicCsp;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton forwardChecking;
    private javax.swing.JButton goToStartPage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextStep;
    private javax.swing.JButton startSimulation;
    private javax.swing.JLabel teamAName;
    private javax.swing.JTable teamATable;
    private javax.swing.JLabel teamBName;
    private javax.swing.JTable teamBTable;
    private javax.swing.JLabel teamCName;
    private javax.swing.JTable teamCTable;
    private javax.swing.JLabel teamDName;
    private javax.swing.JTable teamDTable;
    // End of variables declaration//GEN-END:variables

    private class StatusColumnCellRenderer extends DefaultTableCellRenderer {

        private static final String GREY_COLOR_HEX_CODE = "#3c3f41";

        TeamData teamData;

        private StatusColumnCellRenderer(TeamData team) {
            this.teamData = team;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            javax.swing.JLabel labelCell = (javax.swing.JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
            if (col == 0) {
                return labelCell;
            }
            col -= 1;

            String dayOfWeek = DAYS_OF_WEEK[col];
            Map<DayOfWeek, Set<Pair<LocalTime, LocalTime>>> dayToFreeListMapping = teamData.getFreeList();
            Map<DayOfWeek, Map<String, Set<Pair<LocalTime, LocalTime>>>> dayToMeeting = teamData.getMeetings();

            if (dayToFreeListMapping == null) {
                return labelCell;
            }

            enum CellType {
                FREE, TAKEN, MEETING
            }
            CellType cellType = CellType.TAKEN;

            if (dayToFreeListMapping.containsKey(DayOfWeek.fromString(dayOfWeek))) {
                LocalTime currentRowTime = times[row];
                boolean isFree = dayToFreeListMapping.get(DayOfWeek.fromString(dayOfWeek)).stream().anyMatch(onePair -> {
                    LocalTime startTime = onePair.getValue0();
                    LocalTime endTime = onePair.getValue1();
                    return currentRowTime.compareTo(startTime) >= 0 && currentRowTime.compareTo(endTime) < 0;

                });
                if (isFree) {
                    cellType = CellType.FREE;
                }
            }
            String meetingName = "";
            Map<String, Set<Pair<LocalTime, LocalTime>>> metingsToTermins = dayToMeeting.get(DayOfWeek.fromString(dayOfWeek));
            if (metingsToTermins != null) {
                LocalTime currentRowTime = times[row];
                boolean isMeeting = false;
                for (Map.Entry<String, Set<Pair<LocalTime, LocalTime>>> meetingToTermins : metingsToTermins.entrySet()) {
                    isMeeting = meetingToTermins.getValue().stream().anyMatch(onePair -> {
                        LocalTime startTime = onePair.getValue0();
                        LocalTime endTime = onePair.getValue1();
                        return currentRowTime.compareTo(startTime) >= 0 && currentRowTime.compareTo(endTime) < 0;
                    });
                    meetingName = meetingToTermins.getKey();
                }

                if (isMeeting) {
                    cellType = CellType.MEETING;
                }
            }

            Border border = BorderFactory.createLineBorder(Color.decode(GREY_COLOR_HEX_CODE), 1);
            labelCell.setBorder(border);

            switch (cellType) {
                case TAKEN -> labelCell.setBackground(Color.RED);
                case FREE -> labelCell.setBackground(Color.GREEN);
                case MEETING -> {
                    labelCell.setBackground(Color.CYAN);
                    labelCell.setText(meetingName);
                }
                default -> throw new AssertionError();
            }

            return labelCell;

        }
    }

    @Override
    public void setListener(GuiListener guiListener) {
        this.guiListener = guiListener;
    }

    private List<TeamData> teamsData = new ArrayList<>();

    private GuiListener guiListener;
    private final Object[][] WORK_TIMES_IN_DAY = new Object[][]{
        {"09:00-09:30"},
        {"09:30-10:00"},
        {"10:00-10:30"},
        {"10:30-11:00"},
        {"11:00-11:30"},
        {"11:30-12:00"},
        {"12:00-12:30"},
        {"12:30-13:00"},
        {"13:00-13:30"},
        {"13:30-14:00"},
        {"14:00-14:30"},
        {"14:30-15:00"},
        {"15:00:15:30"},
        {"15:30-16:00"},
        {"16:00-16:30"},
        {"16:30-17:00"},};

    private String[] TABE_HEADER = new String[]{
        "", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
    };
    private String[] DAYS_OF_WEEK = Arrays.copyOfRange(TABE_HEADER, 1, TABE_HEADER.length);

    private void setTableData(JTable table, TeamData teamsData) {
        for (int col = 1; col < TABE_HEADER.length; col++) { // skip first col
            table.getColumnModel().getColumn(col).setCellRenderer(new StatusColumnCellRenderer(teamsData));
        }
    }

    private LocalTime[] times = new LocalTime[]{
        LocalTime.of(9, 0, 0, 0),
        LocalTime.of(9, 30, 0, 0),
        LocalTime.of(10, 0, 0, 0),
        LocalTime.of(10, 30, 0, 0),
        LocalTime.of(11, 0, 0, 0),
        LocalTime.of(11, 30, 0, 0),
        LocalTime.of(12, 00, 0, 0),
        LocalTime.of(12, 30, 0, 0),
        LocalTime.of(13, 00, 0, 0),
        LocalTime.of(13, 30, 0, 0),
        LocalTime.of(14, 00, 0, 0),
        LocalTime.of(14, 30, 0, 0),
        LocalTime.of(15, 00, 0, 0),
        LocalTime.of(15, 3, 0, 0),
        LocalTime.of(16, 00, 0, 0),
        LocalTime.of(16, 30, 0, 0),};
}
